name: Terraform Pipeline with Docker

on:
  push:
    branches:
      - main

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Debug secrets (for troubleshooting only)
        run: |
          echo "Docker username: ${{ secrets.DOCKER_USERNAME }}"  # Ensure this is not empty or incorrect
          echo "AWS Access Key ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS Secret Access Key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Build Docker Image
        run: |
          # Ensure Docker username is not empty or invalid
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "Error: Docker username is not set or is invalid."
            exit 1
          fi
          # Build the Docker image with correct tag format
          docker build --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
                       --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
                       -t "${{ secrets.DOCKER_USERNAME }}/terraform-image:latest" .
          
          # Optional: Push the image if needed
          docker push "${{ secrets.DOCKER_USERNAME }}/terraform-image:latest"

  terraform-apply:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terraform in Docker
        run: |
          docker run --rm \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            "${{ secrets.DOCKER_USERNAME }}/terraform-image:latest" sh -c "terraform init && terraform apply -auto-approve"
